# -*- coding: utf-8 -*-
"""
Created on Wed Oct 24 18:15:29 2018

@author: Praveen Kumar Reddy L
"""

from pythonds.basic.stack import Stack

def infixToNormalForm(infixexpr):
    prec = {}
    prec["*"] = 3
    prec["/"] = 3
    prec["+"] = 2
    prec["-"] = 2
    prec["("] = 1
    opStack = Stack()
    postfixList = []
    tokenList = list(infixexpr)

    for token in tokenList:
        if token in "ABCDEFGHIJKLMNOPQRSTUVWXYZ" or token in "0123456789":
            postfixList.append(token)
        elif token == '(':
            opStack.push(token)
        elif token == ')':
            topToken = opStack.pop()
            while topToken != '(':
                postfixList.append(topToken)
                topToken = opStack.pop()
        else:
            while (not opStack.isEmpty()) and \
               (prec[opStack.peek()] > prec[token]):
                  postfixList.append(opStack.pop())
            opStack.push(token)

    while not opStack.isEmpty():
        postfixList.append(opStack.pop())
    norList = []
    operandStack = Stack()
    tokenList = postfixList
    flag=0
    for token in tokenList:
        if token in "0123456789":
            operandStack.push(token)
        else:
            if(flag==0):
                operand2 = operandStack.pop()
                operand1 = operandStack.pop()
                norList.append(operand1)
                norList.append(operand2)
                norList.append(token)
                flag=1
            else:
                norList.append(operandStack.pop())
                norList.append(token)
    return "".join(norList)

def normFormEval(normFormExpr):
    result=0
    operandStack = Stack()
    tokenList = list(normFormExpr)
    for token in tokenList:
        if token in "0123456789":
            operandStack.push(int(token))
        else:
            operand2 = operandStack.pop()
            operand1 = operandStack.pop()
            result = doMath(token,operand1,operand2)
            operandStack.push(result)
    return operandStack.pop()
def doMath(op, op1, op2):
    if op == "*":
        return op1 * op2
    elif op == "/":
        return op1 / op2
    elif op == "+":
        return op1 + op2
    else:
        return op1 - op2
normFormExpr = infixToNormalForm("(2+4)*9/-3")
print("Normal Form is:",normFormExpr)
print(normFormEval(normFormExpr))
